flowchart TD
Start["Start"]
node1["Function generate_mermaid_flowchart"]
Start --> node1
node2["If: target_function"]
node1 --> node2
node3["Then"]
node2 --> node3
node4["If: '.' in target_function"]
node3 --> node4
node5["Then"]
node4 --> node5
node6["For: node in ast.walk(tree)"]
node4 --> node6
node7["Loop Body"]
node6 --> node7
node8["After Loop"]
node9["If: isinstance(node, ast.ClassDef) and node.name == target_class"]
node7 --> node9
node10["Then"]
node9 --> node10
node11["For: child in node.body"]
node10 --> node11
node12["Loop Body"]
node11 --> node12
node13["After Loop"]
node14["If: isinstance(child, ast.FunctionDef) and child.name == target_method"]
node12 --> node14
node15["Then"]
node14 --> node15
node16["If: target_class"]
node15 --> node16
node17["Then"]
node16 --> node17
node18["Break"]
node16 --> node18
node18 --> node13
node19["Unreachable"]
node14 --> node11
node11 --> node13
node20["Break (Invalid)"]
node13 --> node20
node21["Else"]
node9 --> node21
node22["If: isinstance(node, ast.FunctionDef) and node.name == target_method and (not target_class)"]
node21 --> node22
node23["Then"]
node22 --> node23
node24["Break (Invalid)"]
node23 --> node24
node9 --> node6
node6 --> node8
node25["Else"]
node2 --> node25
node26["If: self.last_node not in self.terminal_nodes and self.last_node != 'Start'"]
node2 --> node26
node27["Then"]
node26 --> node27
node28["For: node in self.terminal_nodes"]
node26 --> node28
node29["Loop Body"]
node28 --> node29
node30["After Loop"]
node29 --> node28
node28 --> node30
node31["Return: '\n'.join(self.flowchart)"]
node30 --> node31
End["End"]
node31 --> End